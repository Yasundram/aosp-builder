#!/bin/bash
cd /tmp/rom


# Set up environment
 . build/envsetup.sh

# Choose a target
 lunch rr_RMX1941-userdebug







export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1

ccache -M 30G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics


make init
make selinux 
 & # dont remove that '&'
sleep 30m
kill %1
ccache -s 
and dont use below codes for first 1 or 2 times, to get ccache uploaded, 
 

# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl -sL https://git.io/file-transfer | sh
	./transfer wet $1; echo 
        # 14 days, 10 GB limit  
} 

# Build command! j10 for 10 cpu, j8 for 8 cpu, otherwise memeroy will end up even its 24G
# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!

# Let's compile by parts! Coz of ram issue!
#mka api-stubs-docs || echo no problem
#mka system-api-stubs-docs || echo no problem
#mka test-api-stubs-docs || echo no problem
#
#mka derp -j8 \
#	&& send_zip=$(up out/target/product/vayu/*zip) && tg $id "Build Succeed!
#$send_zip" \
#	|| tmate -S /tmp/tmate.sock new-session -d && tmate -S /tmp/tmate.sock wait tmate-ready && send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') && tg $id "Build Failed" && tg $id "$send_shell" && ccache -s && sleep 2h
#ccache -s # Let's print ccache statistics finally 
